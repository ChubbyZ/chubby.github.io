<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>search</title>
      <link href="2021/04/16/search/"/>
      <url>2021/04/16/search/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建github博客&amp;踩坑记录</title>
      <link href="2021/04/13/hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
      <url>2021/04/13/hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建自己的github博客"><a href="#搭建自己的github博客" class="headerlink" title="搭建自己的github博客"></a>搭建自己的github博客</h2><p>之前用github搭建博客，用的是github自带的主题，样式太过单一，所以想换主题，折腾了两天，终于搭建成功，故在此记录。先去Baidu搜罗一个自己喜欢的hexo主题备用</p><h3 id="注册并申请github账号"><a href="#注册并申请github账号" class="headerlink" title="注册并申请github账号"></a>注册并申请github账号</h3><ul><li><p>   <a href="https://github.com/join?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=/&source=header-home">注册</a>一个github账号</p></li><li><p>   注册完成后登录，登录后点击new repository<br><img src="/images/%E6%96%B0%E5%BB%BA%E8%B5%84%E6%96%99%E5%BA%93-1.png" alt="142571649d46eb0674a0726e862deda0.png"></p></li><li><p>   创建<br><img src="/images/%E6%96%B0%E5%BB%BA%E8%B5%84%E6%96%99%E5%BA%93-2.png" alt="772fa216880e5a87a5b3b9232bcfcc78.png"></p></li><li><p>  创建完成后放着备用。</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>官网<a href="https://nodejs.org/en/">下载</a>node.js安装，其中自动集成了hexo。下载完成后，新建空文件夹，进行hexo初始化，hexo将会在指定文件夹中新建所需要的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;新建文件夹&gt;</span><br><span class="line">cd &lt;新建文件夹&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>初始化完成后，新建文件夹中的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source|   </span><br><span class="line">            ├── _drafts</span><br><span class="line">            ├── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h4 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h4><h5 id="博客搭建-1"><a href="#博客搭建-1" class="headerlink" title="博客搭建"></a>博客搭建</h5><p>如果自己找的主题readme中有教程，接下来步骤可根据教程操作，以下为个人记录。</p></li><li><p>首先，把选好备用的主题clone到新建文件夹中/theams/路径下：git clone <a href="https://xxxxxxx/xxx">https://xxxxxxx/xxx</a> theams/主题名（可自定义）</p></li><li><p>修改/新建文件文件夹/_config.yml中的theme: landscape为theam: 主题名。注意：此处的主题名应该于路径theams路径下的主题名相同。</p></li><li><p> 在/新建文件文件夹/_config.yml中添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxx.github.io</span><br><span class="line">  # example, https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexojs.github.io</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li><p> 执行以下命令，将博客推到github上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save   *安装依赖</span><br><span class="line">hexo clean         *清除缓存</span><br><span class="line">hexo generate    *生成静态网页</span><br><span class="line">hexo deploy       *推送</span><br></pre></td></tr></table></figure></li><li><p>  完成后访问<a href="https://xxx.github.io即可/">https://xxx.github.io即可</a></p><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br><span class="line">使用hexo new [layout] &lt;title&gt;命令创建页面和文章。例如，要创建“关于我”页面</span><br><span class="line">hexo new post &quot;hello world&quot; *创建新文章</span><br></pre></td></tr></table></figure><p>创建完文章后，依次执行命令hexo generate;hexo deploy即可上传文章成功<br>详细命令参见：<a href="https://hexo.io/zh-cn/docs/commands">hexo</a></p><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2></li></ul><ol><li>想要自定义主题的样式，不可直接在响应的html里面修改，需要到/新建文件夹/theames/主题名/_config.yml中修改。</li><li>如果直接修改html里面的样式则会在运行hexo generate时打回原型</li><li>修改页面详细配置，可到/新建文件夹/themes/主题名/languages/*.yml中修改</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建 hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSS简介和知识储备</title>
      <link href="2021/04/12/RSS%E7%AE%80%E4%BB%8B%E5%92%8C%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
      <url>2021/04/12/RSS%E7%AE%80%E4%BB%8B%E5%92%8C%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h2 id="rss简介"><a href="#rss简介" class="headerlink" title="rss简介"></a>rss简介</h2><p>rss（简易信息聚合），是一种消息来源格式规范，用以聚合经常发布数据的网站，例如博客文章、新闻、音频或视频的网摘，（个人理解一个网站就相当于一个rss订阅）。RSS文件（或称作摘要，网络摘要，或频更新，提供到频道）包含全文或是节录的文字，再加上发用者所订阅之网摘布数据和输欧群的元数据。通常在时效性比较强的内容上使用RSS订阅能更快获取信息，网站提供RSS输出，有利于让用户获取网站内同的最新更新，网络用户可以在客户端借助于支持RSS的聚合工具软件，在不打开网站内容页面的情况下阅读支持RSS输出的网站内容。</p><h2 id="rss解析主体代码"><a href="#rss解析主体代码" class="headerlink" title="rss解析主体代码"></a>rss解析主体代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">网站种子解析</span><br><span class="line"><span class="keyword">import</span> feedparser</span><br><span class="line"><span class="comment"># feedparser是一个python的feed解析库</span></span><br><span class="line"><span class="comment"># 可以处理rss，CDF，Atom，使用他</span></span><br><span class="line"><span class="comment"># 可以从任何RSS或者Atom中得到标题，链接和文章条目</span></span><br><span class="line">rss_oschina = feedparser.parse(url[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 输出channel里面的title</span></span><br><span class="line">pprint.pprint(rss_oschina.feed.title)</span><br><span class="line"><span class="comment"># 整理为json数组</span></span><br><span class="line">mylist = [&#123;<span class="string">&#x27;title&#x27;</span>: entry[<span class="string">&#x27;title&#x27;</span>], <span class="string">&#x27;link&#x27;</span>: entry[<span class="string">&#x27;link&#x27;</span>]&#125; <span class="keyword">for</span> entry <span class="keyword">in</span> rss_oschina[<span class="string">&#x27;entries&#x27;</span>]]</span><br><span class="line"><span class="comment">#  判断channel里面的title是否存在，返回bool型的数值</span></span><br><span class="line"><span class="keyword">if</span> rss_oschina.feed.__contains__(<span class="string">&#x27;title&#x27;</span>):</span><br><span class="line">    title = rss_oschina.feed.title</span><br><span class="line">    pprint.pprint(title)</span><br></pre></td></tr></table></figure><h2 id="参考链接如下："><a href="#参考链接如下：" class="headerlink" title="参考链接如下："></a>参考链接如下：</h2><ul><li>  <a href="https://blog.csdn.net/qq_24185239/article/details/80977556">python学习——print和pprint两者的区别</a></li><li>  <a href="https://blog.csdn.net/qq_38013157/article/details/105896503">python实现RSS解析</a></li><li>  <a href="https://www.runoob.com/rss/rss-tutorial.html">菜鸟教程</a></li><li>  <a href="https://blog.csdn.net/qq_34243930/article/details/86777720">Python解析RSS（feedparser安装与使用）</a></li><li>  <a href="https://www.cnblogs.com/bbn0111/p/7056366.html">Python之feedparser</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> rss python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="2021/04/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2021/04/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、正则表达式函数"><a href="#一、正则表达式函数" class="headerlink" title="一、正则表达式函数"></a>一、正则表达式函数</h2><p>match 这个函数是从头开始匹配且只能从头开始匹配<br>search 这个函数是可以从任意位置开始匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string = <span class="string">&quot;poythonypnyhjptyskphyjsa&quot;</span></span><br></pre></td></tr></table></figure><h3 id="1-match函数"><a href="#1-match函数" class="headerlink" title="1.match函数"></a>1.match函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pat = <span class="string">&quot;p.*?y&quot;</span>      <span class="comment"># .*?y 是一个整体，代表懒惰模式运行（精准，用的比较多），匹配到第一个y为止</span></span><br><span class="line"><span class="comment"># pat = &quot;o.*?y&quot;  # 不能正确匹配  因为match是从头开始匹配的意思</span></span><br><span class="line"><span class="comment"># result = re.match(pat,string,re.I)</span></span><br><span class="line"><span class="comment"># result = re.search(pat,string,re.I)</span></span><br></pre></td></tr></table></figure><h3 id="2-全局函数"><a href="#2-全局函数" class="headerlink" title="2.全局函数"></a>2.全局函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：re.compile（正则表达式）.findall(数据/字符串)</span></span><br><span class="line"><span class="comment"># compile（先编译一下）</span></span><br><span class="line"><span class="comment"># result = re.compile(pat).findall(string)</span></span><br><span class="line"><span class="comment"># print (result)</span></span><br></pre></td></tr></table></figure><h3 id="3-sub函数"><a href="#3-sub函数" class="headerlink" title="3.sub函数"></a>3.sub函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把全局格式匹配出来的所有符合格式的替换成规定的字符串</span></span><br><span class="line">result = re.sub(pat,<span class="string">&quot;123&quot;</span>,string)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="二、正则表达式模式修正符"><a href="#二、正则表达式模式修正符" class="headerlink" title="二、正则表达式模式修正符"></a>二、正则表达式模式修正符</h2><p>在不改变正则表达式的情况下，通过模式修正符改变正则表达式的含义，<br>从而实现一些匹配结果的调整等功能</p><blockquote><p>I   匹配的时候忽略大小写</p><p>M   多行匹配</p><p>L   本地化识别匹配</p><p>U   根据unicode字符进行解析</p><p>S   让.匹配包括换行符</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string = <span class="string">&quot;Python&quot;</span></span><br><span class="line">pat = <span class="string">&quot;pyt&quot;</span></span><br><span class="line"><span class="comment"># re.I  自动忽略大小写</span></span><br><span class="line">result = re.search(pat,string,re.I)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="三、元字符"><a href="#三、元字符" class="headerlink" title="三、元字符"></a>三、元字符</h2><p>元字符就是正则表达式中具有一些特殊含义的字符，比如重复N次的前面的字符<br>常用的元字符有以下几种：</p><blockquote><p>.   匹配除换行符以外的任意一个字符</p><p>^   这个符号如果不在原子表里面，匹配开始的位置<br>$   匹配结束位置</p><ul><li>代表的是前面的原子重复出现0次，1次或多次<br>  ?   代表的是前面的原子重复出现0次，1次</li></ul><ul><li>代表的是前面的原子重复出现1次或多次<br>  {n}  代表的是前面的原子恰好出现n次<br>  {n,}  代表的是前面的原子至少出现n次<br>  {n，m} 代表的是前面的原子至少出现n次,至多出现m次<br>  |   模式选择符或<br>  ()  模式单元</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string = <span class="string">&quot;&quot;&quot;&lt;a target=&quot;_blank&quot; href=&quot;https://www.ikwoonleefzorg.nl&quot;&gt;&quot;&quot;&quot;</span></span><br><span class="line">pat = <span class="string">&quot;&quot;&quot;&lt;a target=&quot;_blank&quot; href=&quot;(http.*?)&quot;&gt;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># string = &quot;&quot;&quot;woshixiaokeai7891234hahuhayou&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># pat = &quot;h[^abc]you&quot;  加上这个&quot;^&quot;符号之后，意思就是除了abc这三个元素其他的都可以匹配</span></span><br><span class="line"><span class="comment"># pat = &quot;h.you&quot;   #匹配两个数字</span></span><br><span class="line">result = re.findall(pat,string)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="四、正则表达式"><a href="#四、正则表达式" class="headerlink" title="四、正则表达式"></a>四、正则表达式</h2><p>正则表达式专用模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string = <span class="string">&quot;woshixiaokeai&quot;</span></span><br></pre></td></tr></table></figure><h3 id="1、普通字符作为原子"><a href="#1、普通字符作为原子" class="headerlink" title="1、普通字符作为原子"></a>1、普通字符作为原子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pat = <span class="string">&quot;keai&quot;</span></span><br><span class="line"><span class="comment"># re.search(正则表达式内容，字符串内容) 用于检索字符串</span></span><br><span class="line">result = re. search(pat,string)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="2、非打印字符作为原子"><a href="#2、非打印字符作为原子" class="headerlink" title="2、非打印字符作为原子"></a>2、非打印字符作为原子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">（指的是不是输出出来的东西，类似于<span class="string">&#x27;\n&#x27;</span>（换行符），<span class="string">&#x27;\t&#x27;</span>(制表符之类的)）</span><br><span class="line">string2 = <span class="string">&quot;&quot;&quot;woshixiaokeai</span></span><br><span class="line"><span class="string">baidu</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">pat = <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">result = re.search(pat,string2)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="3、通用字符作为原子"><a href="#3、通用字符作为原子" class="headerlink" title="3、通用字符作为原子"></a>3、通用字符作为原子</h3><p>也就是说用一个字符代替一类东西，只要出现在这一类东西都能匹配出来<br>常用的有一下几个：</p><blockquote><p>\W 匹配一个任意字母、数字、或者下划线<br>\w 匹配除了字母数字下划线以外的任意一个字符<br>\D 匹配任意一个十进制数<br>\d 除十进制数以外的任意一个字符<br>\s 匹配除空白字符以外的任意一个字符<br>\S 匹配空白字符</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;&quot;&quot;woshixiaokeai 7891234hahu hayou&quot;&quot;&quot;</span></span><br><span class="line">pat = <span class="string">&quot;\s\w\d\d&quot;</span>   <span class="comment">#匹配两个数字</span></span><br><span class="line">result = re.search(pat,string)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">string = <span class="string">&quot;&quot;&quot;woshixiaokeai 7891234hahu hayou&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4、原子表"><a href="#4、原子表" class="headerlink" title="4、原子表"></a>4、原子表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">像[xyz]这样的，然后从中任意提取一个原子 出来</span><br><span class="line">string = <span class="string">&quot;&quot;&quot;woshixiaokeai7891234hahuhayou&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># pat = &quot;h[^abc]you&quot;  加上这个&quot;^&quot;符号之后，意思就是除了abc这三个元素其他的都可以匹配</span></span><br><span class="line">pat = <span class="string">&quot;h[abc]you&quot;</span>   <span class="comment">#匹配两个数字</span></span><br><span class="line">result = re.search(pat,string)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="五、正则表达式实例讲解"><a href="#五、正则表达式实例讲解" class="headerlink" title="五、正则表达式实例讲解"></a>五、正则表达式实例讲解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 如何匹配 .com/.cn等的网址，以及如何匹配电话号码</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string = <span class="string">&quot;&lt;a href=&#x27;http://www.baidu.com&#x27;&gt;百度首页&lt;/a&gt;&quot;</span></span><br><span class="line">pat = <span class="string">&quot;[a-zA-Z]+://[^\s]*[.com|.cn]&quot;</span></span><br><span class="line">rst = re.<span class="built_in">compile</span>(pat).findall(string)</span><br><span class="line"><span class="comment"># rst = re.findall(pat,string)</span></span><br><span class="line"><span class="built_in">print</span>(rst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配电话号码</span></span><br><span class="line"><span class="comment"># pat = &quot;\d&#123;4&#125;-\d&#123;7&#125;|\d&#123;3&#125;-\d&#123;8&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rst = re.findall(pat,string)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取域名</span></span><br><span class="line">string = <span class="string">&#x27;&lt;a href=&quot;//kailaili.com&#x27;</span></span><br><span class="line"><span class="comment"># &lt;a target=&quot;_blank&quot; href=&quot;(http.*?)&quot;&gt;</span></span><br><span class="line">pat = <span class="string">&quot;//[^\s]*&quot;</span></span><br><span class="line">rst = re.findall(pat, string)</span><br><span class="line"><span class="built_in">print</span>(rst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取ip</span></span><br><span class="line">string = <span class="string">&#x27;&lt;/a&gt;&lt;a href=&quot;http://149.202.171.21:9002&quot; &gt;&#x27;</span></span><br><span class="line">pat = <span class="string">&#x27;&lt;/a&gt;&lt;a href=&quot;([http|https]+://[^\s]*)&#x27;</span></span><br><span class="line">rst = re.findall(pat, string)</span><br><span class="line"><span class="built_in">print</span>(rst)</span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;http://149.202.171.21:9002&quot;</span></span><br><span class="line">pat = <span class="string">&#x27;[http|https]+://([^\s]*):&#x27;</span></span><br><span class="line">pat2 = <span class="string">&#x27;[0-9]:([^\s]*)&#x27;</span></span><br><span class="line">rst = re.findall(pat, string)</span><br><span class="line">rst2 = re.findall(pat2, string)</span><br><span class="line"><span class="built_in">print</span>(rst[<span class="number">0</span>],rst2[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;http://149.202.171.21:9002&quot;</span></span><br><span class="line">pat = <span class="string">&#x27;[http|https]+://([^\s]*)&#x27;</span></span><br><span class="line"><span class="comment"># pat2 = &#x27;[0-9]:([^\s]*)&#x27;</span></span><br><span class="line">rst = re.findall(pat, string)</span><br><span class="line"><span class="comment"># rst2 = re.findall(pat2, string)</span></span><br><span class="line"><span class="built_in">print</span>(rst[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据写入excel表格</title>
      <link href="2021/04/12/%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5excel%E8%A1%A8%E6%A0%BC/"/>
      <url>2021/04/12/%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5excel%E8%A1%A8%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="1、创建文件"><a href="#1、创建文件" class="headerlink" title="1、创建文件"></a>1、创建文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line">wb = Workbook()</span><br><span class="line"><span class="comment"># 获取当前actice的sheet</span></span><br><span class="line">ws = wb.active</span><br><span class="line">ws.title = <span class="string">&quot;salary&quot;</span></span><br><span class="line">wb.save(<span class="string">&quot;文件名&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="2、打开已有文件"><a href="#2、打开已有文件" class="headerlink" title="2、打开已有文件"></a>2、打开已有文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line">wb = load_workbook(<span class="string">&#x27;文件名&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="3、获取目前最大行数、列数"><a href="#3、获取目前最大行数、列数" class="headerlink" title="3、获取目前最大行数、列数"></a>3、获取目前最大行数、列数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最大列</span></span><br><span class="line">ws.max_col</span><br><span class="line"><span class="comment"># 最大行</span></span><br><span class="line">ws.max_row</span><br></pre></td></tr></table></figure><h2 id="4、写入数据"><a href="#4、写入数据" class="headerlink" title="4、写入数据"></a>4、写入数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ws.cell(row,col,calue)</span><br></pre></td></tr></table></figure><h2 id="5、按行遍历"><a href="#5、按行遍历" class="headerlink" title="5、按行遍历"></a>5、按行遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方法，按行遍历每一个单元格的值</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> ws:      <span class="comment"># 循环获取表数据</span></span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> row:   <span class="comment">#循环获取每个单元格数据</span></span><br><span class="line">        <span class="built_in">print</span>(cell.value,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 第二种方法，遍历指定的行和列</span></span><br><span class="line"><span class="comment">#遍历第2行到第5行的前10列</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> ws.iter_rows(min_row=<span class="number">2</span>, max_row=<span class="number">5</span>, max_col=<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">        <span class="built_in">print</span>(cell.value, end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h2 id="6、按列遍历"><a href="#6、按列遍历" class="headerlink" title="6、按列遍历"></a>6、按列遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历顺序，大概就像是A1,A2,A3这样的顺序</span></span><br><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> sheet.columns:</span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> column:</span><br><span class="line">        <span class="built_in">print</span>(cell.value, end=<span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python openpyxl </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
